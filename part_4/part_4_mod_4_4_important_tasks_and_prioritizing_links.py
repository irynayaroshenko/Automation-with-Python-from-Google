"""Getting to the Important Tasks"""
# Eisenhower Decision Matrix
# open important_tasks_1.png

# When using this method, we split tasks into two different categories: urgent and important.

# There are tasks that are important and urgent. They need to be done ASAP.
# For example, if the company's Internet connection is down, it's both urgent and important to get it back up ASAP.

# Some tasks are important, but not urgent, so they need to get done at some point even if it takes a while to complete
# them.
# For example, as a follow-up to the network being down, it would be important to make sure that there's a backup
# network connection so that if the existing one is ever down again, the company can stay connected using the backup.

# Other tasks might seem urgent, but aren't really important.
# A lot of the interruptions that we need to deal with are in this category: answering email, phone calls, texts,
# or instant messages feel like something that we need to do right away. But most of the time are not really the best
# use of our time.

# Finally, there's a whole category of tasks that are neither important nor urgent.
# These are distractions and time wasters, they shouldn't be done at all: meetings where nothing useful is being
# discussed, email threads that lead to nowhere, office gossip, and any other tasks that eat up our time without giving
# anything valuable in return.

# In general, to make the most of our time, we need to make sure that we're spending the majority of it on tasks that
# are important. Of course, we'll want to get to the urgent tasks ASAP, but we need to block some time for long-term
# planning and execution. Spending time on long-term tasks might not bear fruit right away, but it can be critical when
# dealing with a large incident.

# For example, setting up your infrastructure so that you can easily roll back changes or deploy new servers when
# needed takes a large chunk of time. But investing in the future can save you even more time and user frustration when
# responding to a problem.

# Researching new technologies is another task in this category. IT is always evolving, and it's important to have time
# set aside to stay up to date. Figure out if it's time to migrate the web server to different software, update the mail
# server to a new OS version, or deploy voice-over IP throughout your company.

# Another important task that might not necessarily be urgent is solving technical debt.
# Technical debt is the pending work that accumulates when we choose a quick-and-easy solution instead of applying a
# sustainable long-term one.

# We call that a few times already though in solving the problem we might apply a short-term remediation to fix it right
# away, and then plan for a long-term solution to prevent it from happening in the future. Until we have fixed the
# sticks, the workaround we created is technical debt because we need to spend time keeping it in place even if it's not
# the best solution.
# Whenever we go for short-term solution and leave the long-term solution for later, we're creating technical debt.

# This might be the right decision at the moment to get us out of a crisis and let our users get back to work,
# but we need to unscheduled time to apply the long-term solution that will make our future lives easier.

# Technical debt can also be generated by external parties. For example, when a new version of the software we're using
# is released, will need to schedule time to upgrade it. Until we do, that pending upgrade is technical debt.

"""Prioritizing Tasks"""
# open prioritizing_tasks.png

# 1. Make a list of all the tasks that need to get done

# 2. Check the real urgency of the tasks
# If any items don't get done today will something bad happen? - If yes, then those should be worked on first

# 3. Assess (evaluate) the importance of each issue
# Even when it looks like everything is important, you should be able to tell that some things are more important than
# others.
# For example, a task that will benefit more people is more important than a task that will benefit less people.
# If there are a bunch of different tasks that depend on you completing one, that roadblock is more important to clear
# than the rest.
# If it still seems like everything is on fire, you can try dividing the tasks into groups of:
# a) most important
# b) important
# c) not so important
# And then sort the tasks inside each group.

# If you work in a team, it's a good idea to share both: the list of tasks and the standard of prioritization among
# team members. This helps you avoid having to do the work multiple times and coming out with different priorities.

# 4. How much effort they'll take
# One common technique is to use small, medium, and large.
# And when the range of sizes is big enough, include extra small or extra large if needed. Once you identify the most
# important tasks and how big they are, you can start working on them. If possible, try to start with the larger,
# most important tasks to get those out of the way first.

# If a task is not important, it shouldn't be done at all.


"""Estimating the Time Tasks Will Take"""
# If you're trying to estimate how long it will take you to complete a project, big or small, you need to be realistic.
# Avoid being overly optimistic with your time estimates.
# The best way to do this is to compare the task that you're trying to do with similar tasks that you've done before.

# Make a better estimate of a bigger than average project, you'll want to chop it up. Split the task into smaller steps.
# Compare each step to a similar task that you've done in the past and assign an estimated amount of time to each step
# based on that. If one smaller step is still too large, then split it into even smaller pieces until you can
# compare each piece of the puzzle was something that you've done before.

# Once you have a rough estimate of the total time of all the steps, you want to factor in some extra time for
# integration.

# Take this estimation and multiply it by a factor. This factor works best when it's based on previous experience.

"""Communicating Expectations"""

# Communication is key.
# Try to be clear and up front about when you expect the issue will be resolved, and if for any reason the issue isn't
# solved by then, explain why and what the new expectation should be.

"""More About Making the Best Use of Our Time"""
# https://blog.rescuetime.com/how-to-prioritize/
