"""Deleting and Renaming Files"""
# delete files from repo: delete with 'git rm' and COMMIT deletion

# git rm <file_name>
# git commit -m "Deleting file <file_name>"


# rename, move file: rename with 'git mv' and COMMIT renaming

# git mv <old_file_name> <new_file_name>
# git commit -m "Renaming file <file_name>"


# .gitignore file

# If there are files that get automatically generated by our scripts, or our OS generates artifacts that we don't want
# in our repo, we'll want to ignore them so that they don't add noise to the output of git status.
# To do this, we can use the '.gitignore' file inside which we'll specify rules to tell git which files to skip for
# the current repo.

# For example, if we're working on an OSX computer, we'll probably want to ignore .DS_STORE file, which is automatically
# generated by OS. To do this, we'll create a .gitignore file containing the name of this file.
# Remember that the dot prefix in a Unix-like file system indicates that the file or directory is hidden and won't show
# up when you do the normal directory listing.
# That's why we have to use 'ls-la' to see all files.

# add with 'echo' .DS_STORE to .gitignore (at the same time creating .gitignore) -> check file with 'ls -la' ->
# git add -> git commit


# Example:

# $ echo .DS_STORE > .gitignore
#
# i_yaroshenko@DM-NB-108 MINGW64 ~/checks (main)
# $ ls -la
# total 35
# drwxr-xr-x 1 i_yaroshenko 1049089    0 Jul  6 22:50 ./
# drwxr-xr-x 1 i_yaroshenko 1049089    0 Jul  6 22:44 ../
# drwxr-xr-x 1 i_yaroshenko 1049089    0 Jul  6 22:44 .git/
# -rw-r--r-- 1 i_yaroshenko 1049089   10 Jul  6 22:50 .gitignore
# -rw-r--r-- 1 i_yaroshenko 1049089  271 Jul  6 22:06 all_checks_correct.py
# -rw-r--r-- 1 i_yaroshenko 1049089 3227 Jul  5 16:58 disc_usage_fixed.py
# -rw-r--r-- 1 i_yaroshenko 1049089  229 Jul  5 16:26 rearrange.py
#
# i_yaroshenko@DM-NB-108 MINGW64 ~/checks (main)
# $ git add .gitignore
# warning: in the working copy of '.gitignore', LF will be replaced by CRLF the next time Git touches it
#
# i_yaroshenko@DM-NB-108 MINGW64 ~/checks (main)
# $ git status
# On branch main
# Changes to be committed:
#   (use "git restore --staged <file>..." to unstage)
#         new file:   .gitignore
#
#
# i_yaroshenko@DM-NB-108 MINGW64 ~/checks (main)
# $ git commit -m "Added .DS_STORE to .gitignore"
# [main 0987e60] Added .DS_STORE to .gitignore
#  1 file changed, 1 insertion(+)
#  create mode 100644 .gitignore


# git log --follow [file]
# Lists version history for a file, including renames


# Example:
# $ git log --follow all_checks_correct.py
# commit 03d98f144d252485eceda068b122a4319adfbbdc
# Author: ira_yar <irina.yaroshenko99@gmail.com>
# Date:   Thu Jul 6 22:44:20 2023 +0300
#
#     Remaning file
#
# commit 0206d247f8d1df0dbaa94e94b298403eb16fb24d
# Author: ira_yar <irina.yaroshenko99@gmail.com>
# Date:   Thu Jul 6 22:25:10 2023 +0300
#
#     Added message 'Everything ok'
#
# commit 2ce41b541e84d3da6848cae63a81890e9d55bd9d
# Author: ira_yar <irina.yaroshenko99@gmail.com>
# Date:   Thu Jul 6 20:51:02 2023 +0300
#
#     Commit without staging modified file all_checks.py


"""Advanced Git Cheat Sheet"""

# Command  |  Explanation & Link

# git commit -a
# Stages files automatically  https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---all

# git log -p
# Produces patch text https://git-scm.com/docs/git-log#_generating_patch_text_with_p

# git show
# Shows various objects  https://git-scm.com/docs/git-show

# git diff
# Is similar to the Linux `diff` command, and can show the differences in various commits
# https://git-scm.com/docs/git-diff

# git diff --staged
# An alias to --cached, this will show all staged files compared to the named commit
# https://git-scm.com/docs/git-diff

# git add -p
# Allows a user to interactively review patches to add to the current commit https://git-scm.com/docs/git-add

# git mv
# Similar to the Linux `mv` command, this moves a file https://git-scm.com/docs/git-mv

# git rm
# Similar to the Linux `rm` command, this deletes, or removes a file https://git-scm.com/docs/git-rm

# Useful Git cheatsheet: https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf

# .gitignore files
#
# .gitignore files are used to tell the git tool to intentionally ignore some files in a given Git repository.
# For example, this can be useful for configuration files or metadata files that a user may not want to check into
# the master branch. Check out more at: https://git-scm.com/docs/gitignore

# A few common examples of file patterns:
# https://gist.github.com/octocat/9257657
# https://github.com/github/gitignore
