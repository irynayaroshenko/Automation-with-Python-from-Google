"""Applying Changes"""

# to show explicitly the diff in file:
# diff -u old_file new_ file > change.diff

# Explanation:
# '>' redirects the output of the diff command to a file.
# This command generates a file called change.diff with the contents of 'diff -u' command.
# By using the '-u' flag, we include more context.

# The generated file is usually referred to as a diff file or sometimes a patch file.
# It includes all the changes between the old file and the new one, plus the additional context needed to understand
# the changes and to apply those changes back to the original file.

# 'patch' command
# takes a file generated by diff and applies the changes to the original file

# open cpu_usage_diff.png
# Script uses the psutil module to check the percentage of the CPU that's currently in use.
# When the load is above a threshold, here 75 percent, it prints a message with an error.
# When it's under the threshold, it says that everything's okay.
# But colleagues say even if a computer is completely overloaded, the script will say that everything's okay.
# They sent us a diff with the fix for our problem.
# They added a one as a parameter to the CPU percent function, and they added a debugging line, that prints the value
# returned by the function (by calling the CPU percent function without a parameter, we were not averaging over a period
# of time, and so the call always returns zero).
# How to apply diff to our script?
# Use the patch command.
# We'll pass the name of the file that we want to patch (cpu_usage.py) as the first parameter to the command,
# and then we'll provide the diff file through standard input.

# patch cpu_usage.py < cpu_usage.diff
# Output:
# patching file cpu_usage.py

# Result: open cpu_usage_patch_result.png
# When we happy with correct script working, we can remove the debugging line.
